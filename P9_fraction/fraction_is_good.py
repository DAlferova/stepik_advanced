"""
–Æ–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏–∫ üå∂Ô∏è
–î–∏–º–∞ —É—á–∏—Ç—Å—è –≤ —Å–µ–¥—å–º–æ–º –∫–ª–∞—Å—Å–µ –∏ —Å–µ–π—á–∞—Å –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–±–∏ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∏—Ç–µ–ª–µ–º –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º.
–í—á–µ—Ä–∞ –Ω–∞ —É—Ä–æ–∫–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –î–∏–º–∞ —É–∑–Ω–∞–ª, —á—Ç–æ –¥—Ä–æ–±—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π, –µ—Å–ª–∏ –µ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å –º–µ–Ω—å—à–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è,
 –∏ –Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–≤–Ω–æ–π –µ–π –¥—Ä–æ–±–∏ —Å –º–µ–Ω—å—à–∏–º–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∏—Ç–µ–ª–µ–º –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º.

–î–∏–º–∞ –æ—á–µ–Ω—å –ª—é–±–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ø–æ—ç—Ç–æ–º—É –¥–æ–º–∞ –æ–Ω –¥–æ–ª–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª, –ø—Ä–∏–¥—É–º—ã–≤–∞—è –∏ —Ä–µ—à–∞—è —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
–Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º—ã–º–∏ –¥—Ä–æ–±—è–º–∏. –û–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –î–∏–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.

–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
–Ω–µ—Å–æ–∫—Ä–∞—Ç–∏–º—É—é –¥—Ä–æ–±—å —Å —Å—É–º–º–æ–π —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ–π nn.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è gcd(), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å (–ù–û–î)
–¥–≤—É—Ö —á–∏—Å–µ–ª. –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –º–æ–¥—É–ª–µ math.

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:
10
Sample Output 1:
3/7
Sample Input 2:
23
Sample Output 2:
11/12
"""
from fractions import Fraction
from math import gcd
num = int(input())
result = 0


def is_good(m, n):
    # print(f'{m}/{n} : {Fraction(f"{m}/{n}")}')
    if f'{m}/{n}' == str(Fraction(f'{m}/{n}')):
        return True
    return False


for i in range(1, num // 2 + 1):
    # print(f'{i} : {is_good(i, num - i)}')
    if is_good(i, num - i):
        if result < Fraction(f'{i}/{num - i}'):
            result = Fraction(f'{i}/{num - i}')

print(result)
